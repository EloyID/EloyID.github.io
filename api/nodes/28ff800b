{
  "code": "def end_of_data_extraction(\n    featured_merged_input_data,\n):\n    plotting_featured_merged_input_data = featured_merged_input_data.copy()\n    plotting_featured_merged_input_data[\"Fecha\"] = featured_merged_input_data[\n        \"Fecha UTC\"\n    ].dt.date\n\n    # create a figure with 6 subplots\n    fig, axs = plt.subplots(6, figsize=(10, 10))\n\n    # scatter 'Energía Compra/Venta' vs 'Precio Compra/venta'\n    plotting_featured_merged_input_data.plot.scatter(\n        \"Energía Compra/Venta Acumulada\", \"Precio Compra/Venta\", ax=axs[0], s=0.1\n    )\n    axs[0].set_title(\"Energía Compra/Venta Acumulada vs Precio Compra/Venta\")\n\n    # lines Fecha UTC (x) Predicción solar (y) Predicción eólica (y) Predicción demanda (y)\n    plotting_features = [\"Predicción solar\", \"Predicción eólica\", \"Predicción demanda\"]\n    plotting_features = [\n        feature\n        for feature in plotting_features\n        if feature in plotting_featured_merged_input_data.columns\n    ]\n    plotting_featured_merged_input_data.plot(\n        \"Fecha UTC\",\n        plotting_features,\n        ax=axs[1],\n    )\n    axs[1].set_title(f\"Fecha UTC vs {', '.join(plotting_features)}\")\n\n    # group the data by 'Fecha'\n    grouped = plotting_featured_merged_input_data.groupby(\"Fecha\")\n\n    # for each group, plot 'Hora' vs 'Predicción solar' and 'Hora' vs 'Predicción eólica'\n    for name, group in grouped:\n        if \"Predicción solar\" in group.columns:\n            group.plot(\n                \"Hora\",\n                \"Predicción solar\",\n                ax=axs[2],\n                legend=False,\n                linewidth=0.5,\n            )\n        if \"Predicción eólica\" in group.columns:\n            group.plot(\n                \"Hora\",\n                \"Predicción eólica\",\n                ax=axs[3],\n                legend=False,\n                linewidth=0.5,\n            )\n        if \"Predicción demanda\" in group.columns:\n            group.plot(\n                \"Hora\",\n                \"Predicción demanda\",\n                ax=axs[4],\n                legend=False,\n                linewidth=0.5,\n            )\n\n    axs[2].set_title(\"Hora vs Predicción solar\")\n    axs[3].set_title(\"Hora vs Predicción eólica\")\n    axs[4].set_title(\"Hora vs Predicción demanda\")\n\n    # lines 'Energía Compra/Venta Acumulada' vs 'Precio Compra/venta', where the line shared only if same 'Fecha UTC'\n    for date, group in plotting_featured_merged_input_data.groupby(\"Fecha UTC\"):\n        group = group.sort_values(\"Energía Compra/Venta Acumulada\")\n        group.plot(\n            \"Energía Compra/Venta Acumulada\",\n            \"Precio Compra/Venta\",\n            ax=axs[5],\n            legend=False,\n            linewidth=0.5,\n        )\n\n    axs[5].set_title(\"Energía Compra/Venta Acumulada vs Precio Compra/Venta\")\n\n    # plotting_featured_merged_input_data.plot.scatter(\n    #     \"Energía Compra/Venta Acumulada\",\n    #     \"Energía Compra/Venta\",\n    #     ax=axs[6],\n    #     c=\"Hora\",\n    #     colormap=\"viridis\",\n    #     legend=False,\n    #     s=0.5,\n    # )\n    # axs[6].set_title(\"Energía Compra/Venta Acumulada vs Energía Compra/Venta\")\n\n    plt.tight_layout()\n\n    return plt\n",
  "filepath": "energy-market-forecast\\src\\energy_demand\\nodes\\reporting\\end_of_data_extraction.py",
  "parameters": {},
  "run_command": "kedro run --to-nodes=end_of_data_extraction",
  "inputs": [
    "featured_merged_input_data"
  ],
  "outputs": [
    "featured_merged_input_data_plots"
  ]
}