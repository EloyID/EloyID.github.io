{
  "code": "def xgboost_monotonic_price_pca_reporting(\n    X_train,\n    y_train,\n    y_train_pred,\n    X_test,\n    y_test,\n    y_test_pred,\n    min_price_eval,\n    max_price_eval,\n):\n\n    train_mask_for_eval = get_eval_mask(\n        X_train, min_price_eval, max_price_eval, 'Precio Compra/Venta'\n    )\n\n    X_train = X_train[train_mask_for_eval]\n    y_train = y_train[train_mask_for_eval]\n    y_train_pred = y_train_pred[train_mask_for_eval]\n\n    y_train_pred = pd.Series(y_train_pred, index=y_train.index)\n    y_test_pred = pd.Series(y_test_pred, index=y_test.index)\n\n    # To calculate the error metrics of the price, we are interpolating the 'real' price\n    # for the predicted energy values\n    train_price_inferred = infer_price_from_energy(X_train, y_train, y_train_pred)\n    test_price_inferred = infer_price_from_energy(X_test, y_test, y_test_pred)\n\n    examples_length = 3\n    colors = cm.viridis(np.linspace(0, 1, examples_length))\n\n    X_train_dates = X_train[\"Fecha UTC\"].unique()\n    X_test_dates = X_test[\"Fecha UTC\"].unique()\n\n    # Create a plot with seven subplots\n    fig, axs = plt.subplots(15, figsize=(10, 80))\n    plt.suptitle(\"XGBoost Monotonic Price PCA\")\n\n    # First subplot\n    axs[0].plot(X_train_dates, [\"train\"] * len(X_train_dates), color=\"blue\")\n    axs[0].plot(X_test_dates, [\"test\"] * len(X_test_dates), color=\"red\")\n    axs[0].set_title(\"Train and Test Data\")\n    axs[0].legend([\"Train\", \"Test\"])\n\n    # Second subplot\n    example_dates = X_train[\"Fecha UTC\"].unique()[:examples_length]\n    for i, date in enumerate(example_dates):\n        y_data = y_train[X_train[X_train[\"Fecha UTC\"] == date].index].sort_values()\n        data = X_train.loc[y_data.index]\n\n        axs[1].plot(\n            y_data,\n            data[\"Precio Compra/Venta\"],\n            color=colors[i],\n        )\n        axs[1].plot(\n            y_train_pred[y_data.index],\n            data[\"Precio Compra/Venta\"],\n            color=colors[i],\n            linestyle=\"dotted\",\n        )\n    axs[1].set_title(\"Train Data Examples\")\n    axs[1].legend([\"Actual\", \"Predicted\"])\n\n    for date, group in X_train.groupby(\"Fecha UTC\"):\n        y_data = y_train[group.index].sort_values()\n        group = group.loc[y_data.index]\n\n        # Third subplot\n        axs[2].plot(\n            y_data,\n            group[\"Precio Compra/Venta\"],\n        )\n\n        # Fourth subplot\n        axs[3].plot(\n            y_train_pred[y_data.index],\n            group[\"Precio Compra/Venta\"],\n            linestyle=\"dotted\",\n        )\n\n        # Fourth subplot\n        axs[4].plot(\n            y_train_pred[y_data.index] - y_data,\n            group[\"Precio Compra/Venta\"],\n        )\n\n        axs[5].plot(\n            y_train_pred[y_data.index],\n            train_price_inferred[y_data.index],\n            linestyle=\"dashed\",\n        )\n\n        axs[6].plot(\n            y_data,\n            train_price_inferred[y_data.index] - group[\"Precio Compra/Venta\"],\n        )\n\n    axs[2].set_title(\"Train Data\")\n    axs[2].legend([\"Actual\"])\n    axs[3].set_title(\"Train Data Predicted\")\n    axs[3].legend([\"Predicted\"])\n    axs[4].set_title(\"Train Data price predicted residuals\")\n    axs[4].legend([\"Residual\"])\n    axs[5].set_title(\"Train Data actual price interpolated for predicted energy values\")\n    axs[5].legend([\"Interpolated\"])\n    axs[6].set_title(\n        \"Train Data price interpolated for predicted energy values residuals\"\n    )\n    axs[6].legend([\"Residual\"])\n\n    # Fifth subplot\n    example_dates = X_test[\"Fecha UTC\"].unique()[:examples_length]\n    for i, date in enumerate(example_dates):\n        y_data = y_test[X_test[X_test[\"Fecha UTC\"] == date].index].sort_values()\n        data = X_test.loc[y_data.index]\n\n        axs[7].plot(\n            y_data,\n            data[\"Precio Compra/Venta\"],\n            color=colors[i],\n        )\n        axs[7].plot(\n            y_test_pred[y_data.index],\n            data[\"Precio Compra/Venta\"],\n            color=colors[i],\n            linestyle=\"dotted\",\n        )\n    axs[7].set_title(\"Test Data Examples\")\n    axs[7].legend([\"Actual\", \"Predicted\"])\n\n    for date, group in X_test.groupby(\"Fecha UTC\"):\n        y_data = y_test[group.index].sort_values()\n        group = group.loc[y_data.index]\n\n        # Third subplot\n        axs[8].plot(\n            y_data,\n            group[\"Precio Compra/Venta\"],\n        )\n\n        # Fourth subplot\n        axs[9].plot(\n            y_test_pred[y_data.index],\n            group[\"Precio Compra/Venta\"],\n            linestyle=\"dotted\",\n        )\n\n        # Fourth subplot\n        axs[10].plot(\n            y_test_pred[y_data.index] - y_data,\n            group[\"Precio Compra/Venta\"],\n        )\n\n        axs[11].plot(\n            y_test_pred[y_data.index],\n            test_price_inferred[y_data.index],\n            linestyle=\"dashed\",\n        )\n\n        axs[12].plot(\n            y_data,\n            test_price_inferred[y_data.index] - group[\"Precio Compra/Venta\"],\n        )\n\n    axs[8].set_title(\"Test Data\")\n    axs[8].legend([\"Actual\"])\n    axs[9].set_title(\"Test Data Predicted\")\n    axs[9].legend([\"Predicted\"])\n    axs[10].set_title(\"Test Data Predicted residuals\")\n    axs[10].legend([\"Residual\"])\n    axs[11].set_title(\"Test Data actual price interpolated for predicted energy values\")\n    axs[11].legend([\"Interpolated\"])\n    axs[12].set_title(\n        \"Test Data price interpolated for predicted energy values residuals\"\n    )\n    axs[12].legend([\"Residual\"])\n\n    train_mae = mean_absolute_error(y_train, y_train_pred)\n    test_mae = mean_absolute_error(y_test, y_test_pred)\n\n    train_rmse = mean_squared_error(y_train, y_train_pred, squared=False)\n    test_rmse = mean_squared_error(y_test, y_test_pred, squared=False)\n\n    train_r2 = r2_score(y_train, y_train_pred)\n    test_r2 = r2_score(y_test, y_test_pred)\n    # Create a table comparing train and test metrics\n    metrics_data = [\n        [\"MAE\", train_mae, test_mae],\n        [\"RMSE\", train_rmse, test_rmse],\n        [\"R2\", train_r2, test_r2],\n    ]\n    table = axs[13].table(\n        cellText=metrics_data, colLabels=[\"Metric\", \"Train\", \"Test\"], loc=\"center\"\n    )\n    axs[13].set_title(\"Metrics comparison for energy quantity prediction\")\n\n    table.auto_set_font_size(False)\n    table.set_fontsize(10)\n    table.scale(1, 1.5)\n\n    interpolated_train_mae = mean_absolute_error(\n        X_train[\"Precio Compra/Venta\"], train_price_inferred\n    )\n    interpolated_test_mae = mean_absolute_error(\n        X_test[\"Precio Compra/Venta\"], test_price_inferred\n    )\n\n    interpolated_train_rmse = mean_squared_error(\n        X_train[\"Precio Compra/Venta\"], train_price_inferred, squared=False\n    )\n    interpolated_test_rmse = mean_squared_error(\n        X_test[\"Precio Compra/Venta\"], test_price_inferred, squared=False\n    )\n\n    interpolated_train_r2 = r2_score(\n        X_train[\"Precio Compra/Venta\"], train_price_inferred\n    )\n    interpolated_test_r2 = r2_score(X_test[\"Precio Compra/Venta\"], test_price_inferred)\n\n    # Create a table comparing train and test metrics\n    interpolated_metrics_data = [\n        [\"MAE\", interpolated_train_mae, interpolated_test_mae],\n        [\"RMSE\", interpolated_train_rmse, interpolated_test_rmse],\n        [\"R2\", interpolated_train_r2, interpolated_test_r2],\n    ]\n\n    interpolated_table = axs[14].table(\n        cellText=interpolated_metrics_data,\n        colLabels=[\"Metric\", \"Train\", \"Test\"],\n        loc=\"center\",\n    )\n\n    axs[14].set_title(\"Metrics comparison for price prediction\")\n    interpolated_table.auto_set_font_size(False)\n    interpolated_table.set_fontsize(10)\n    interpolated_table.scale(1, 1.5)\n\n    return plt\n",
  "filepath": "energy-market-forecast\\src\\energy_demand\\nodes\\reporting\\xgboost_price_pca_monotonic_reporting.py",
  "parameters": {
    "min_price_eval": 0,
    "max_price_eval": 200
  },
  "run_command": "kedro run --to-nodes=xgboost_monotonic_price_pca_reporting",
  "inputs": [
    "X_train_price_pca_dataset",
    "y_train_price_pca_dataset",
    "y_train_price_pca_dataset_predicted",
    "X_test_price_pca_dataset",
    "y_test_price_pca_dataset",
    "y_test_price_pca_dataset_predicted",
    "params:min_price_eval",
    "params:max_price_eval"
  ],
  "outputs": [
    "xgboost_monotonic_price_pca_reporting_plots"
  ]
}