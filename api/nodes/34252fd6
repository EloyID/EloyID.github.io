{
  "code": "def transform_pbc_data(\n    raw_pbc_data,\n    raw_solar_data,\n    raw_wind_data,\n    raw_demand_data,\n    bid_type,\n    start_date,\n    end_date,\n    min_energy_cumsum,\n    max_energy_cumsum,\n    min_price,\n    max_price,\n    optional_explanatory_variables,\n    database_config,\n):\n    database_uri = get_database_uri(database_config)\n    engine = sqlalchemy.create_engine(database_uri)\n    create_merged_input_data_connection(database_config)\n    # Select necessary columns\n\n    calculated_dates = pd.read_sql(\n        \"SELECT DISTINCT `Fecha UTC` FROM merged_input_data\", engine\n    )\n\n    calculated_dates = (\n        (calculated_dates[\"Fecha UTC\"].dt.tz_localize(\"UTC\").dt.tz_convert(\"UTC\"))\n        if not calculated_dates.empty\n        else pd.Series()\n    )\n\n    # Get the calculated 'Fecha UTC' values\n    available_dates = pd.read_sql(\n        \"SELECT DISTINCT `Fecha`, `Hora` FROM raw_pbc\", engine\n    )\n\n    transformed_available_dates = raw_pbc_data_date_hour_to_datetime(available_dates)\n    not_calculated_dates = available_dates[\n        ~transformed_available_dates.isin(calculated_dates)\n    ]\n\n    if not not_calculated_dates.empty:\n        not_calculated_raw_pbc_data = pd.read_sql(\n            f\"\"\"SELECT * FROM raw_pbc\n            WHERE (`Fecha`, `Hora`) IN {tuple(zip(not_calculated_dates[\"Fecha\"], not_calculated_dates[\"Hora\"]))}\n            AND `Ofertada (O)/Casada (C)` = 'O'\n            \"\"\",\n            engine,\n        )\n\n        inserting_merged_input_data = not_calculated_raw_pbc_data[\n            [\n                \"Hora\",\n                \"Fecha\",\n                \"Tipo Oferta\",\n                \"Energía Compra/Venta\",\n                \"Precio Compra/Venta\",\n                \"Ofertada (O)/Casada (C)\",\n            ]\n        ]\n\n        # Convert columns to float\n        # pd.to_numeric redundant to convert to cast as numeric since it was object\n        inserting_merged_input_data.loc[:, \"Energía Compra/Venta\"] = pd.to_numeric(\n            latin_numeric_notation_to_numeric(\n                inserting_merged_input_data[\"Energía Compra/Venta\"]\n            )\n        )\n        inserting_merged_input_data.loc[:, \"Precio Compra/Venta\"] = pd.to_numeric(\n            latin_numeric_notation_to_numeric(\n                inserting_merged_input_data[\"Precio Compra/Venta\"]\n            )\n        )\n\n        inserting_merged_input_data.loc[:, \"Fecha UTC\"] = (\n            raw_pbc_data_date_hour_to_datetime(inserting_merged_input_data)\n        )\n\n        inserting_merged_input_data.loc[:, \"Hora\"] = inserting_merged_input_data[\n            \"Fecha UTC\"\n        ].dt.hour\n        inserting_merged_input_data.loc[:, \"Día de la semana\"] = (\n            inserting_merged_input_data[\"Fecha UTC\"].dt.dayofweek\n        )\n        inserting_merged_input_data.loc[:, \"Mes\"] = inserting_merged_input_data[\n            \"Fecha UTC\"\n        ].dt.month\n\n        # Drop the original 'Fecha' columns\n        inserting_merged_input_data = inserting_merged_input_data.drop(\n            [\"Fecha\"], axis=1\n        )\n\n        inserting_merged_input_data = merge_sios_data(\n            inserting_merged_input_data, raw_solar_data, \"Predicción solar\"\n        )\n        inserting_merged_input_data = merge_sios_data(\n            inserting_merged_input_data, raw_wind_data, \"Predicción eólica\"\n        )\n        inserting_merged_input_data = merge_sios_data(\n            inserting_merged_input_data, raw_demand_data, \"Predicción demanda\"\n        )\n\n        inserting_merged_input_data[\"Energía Compra/Venta Acumulada\"] = (\n            get_cumulative_energy(inserting_merged_input_data)\n        )\n\n        inserting_merged_input_data = inserting_merged_input_data.to_sql(\n            \"merged_input_data\",\n            engine,\n            if_exists=\"append\",\n            index=False,\n        )\n\n    selected_columns = [\n        \"Fecha UTC\",\n        \"Precio Compra/Venta\",\n        \"Energía Compra/Venta Acumulada\",\n        *optional_explanatory_variables,\n    ]\n\n    merged_input_data = pd.read_sql(\n        f\"\"\"\n        SELECT {field_list_to_sql_string(selected_columns)} FROM merged_input_data\n        WHERE `Tipo Oferta` = '{bid_type}' \n        AND `Fecha UTC` BETWEEN '{start_date}' AND '{end_date}' \n        AND `Energía Compra/Venta Acumulada` BETWEEN {min_energy_cumsum} AND {max_energy_cumsum}\n        ORDER BY `Fecha UTC` ASC\n        \"\"\",\n        engine,\n    )\n\n    price_merged_input_data = pd.read_sql(\n        f\"\"\"\n        SELECT {field_list_to_sql_string(selected_columns)} FROM merged_input_data\n        WHERE `Tipo Oferta` = '{bid_type}' \n        AND `Fecha UTC` BETWEEN '{start_date}' AND '{end_date}' \n        AND `Precio Compra/Venta` BETWEEN {min_price} AND {max_price}\n        ORDER BY `Fecha UTC` ASC\n        \"\"\",\n        engine,\n    )\n\n    ## THIS HAS NOTHING TO DO BUT I HAD TO PUT IT SOMEWHERE\n\n    extended_params = get_extended_params()\n\n    return merged_input_data, price_merged_input_data, extended_params\n",
  "filepath": "energy-market-forecast\\src\\energy_demand\\nodes\\data_transformations\\transform_pbc_data.py",
  "parameters": {
    "bid_type": "C",
    "start_date": "2024-01-20",
    "end_date": "2024-01-31",
    "min_energy_cumsum": 500,
    "max_energy_cumsum": 50000,
    "min_price": 0,
    "max_price": 200,
    "optional_explanatory_variables": [
      "Hora",
      "Día de la semana",
      "Predicción eólica",
      "Predicción demanda"
    ],
    "database_config": {
      "database": "energy-market-forecast",
      "user": "root",
      "password": "3loy3loy",
      "host": "127.0.0.1"
    }
  },
  "run_command": "kedro run --to-nodes=transform_pbc",
  "inputs": [
    "raw_pbc_data",
    "raw_solar_data",
    "raw_wind_data",
    "raw_demand_data",
    "params:bid_type",
    "params:start_date",
    "params:end_date",
    "params:min_energy_cumsum",
    "params:max_energy_cumsum",
    "params:min_price",
    "params:max_price",
    "params:optional_explanatory_variables",
    "params:database_config"
  ],
  "outputs": [
    "featured_merged_input_data",
    "featured_price_merged_input_data",
    "params_reporting"
  ]
}