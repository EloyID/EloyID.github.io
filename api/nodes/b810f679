{
  "code": "def create_batched_price_input_data_table(\n    featured_price_merged_input_data,\n    start_date,\n    end_date,\n    bid_type,\n    price_batch_size,\n    min_price,\n    max_price,\n    database_config,\n):\n    # wandb.init(project=\"iit-energy-prediction\")\n    # wandb.log({\"price_batch_size\": price_batch_size})\n\n    # Create a connection to the database\n    connection = create_batched_price_input_data_connection(database_config)\n    cursor = connection.cursor()\n    database_uri = get_database_uri(database_config)\n    engine = sqlalchemy.create_engine(database_uri)\n\n    batches = np.arange(min_price, max_price + price_batch_size, price_batch_size)\n\n    # Get the unique 'Fecha UTC' values\n    cursor.execute(\n        f\"SELECT DISTINCT `Fecha UTC` FROM merged_input_data WHERE `Tipo Oferta` = '{bid_type}' \"\n    )\n    available_dates = cursor.fetchall()\n\n    # Get the calculated 'Fecha UTC' values\n    cursor.execute(\n        f\"SELECT DISTINCT `Fecha UTC` FROM batched_price_input_data WHERE `Tipo Oferta` = '{bid_type}' \"\n    )\n    calculated_dates = cursor.fetchall()\n\n    # Get the calculated 'Fecha UTC' values\n    cursor.execute(\n        f\"SELECT DISTINCT `Precio Compra/Venta` FROM batched_price_input_data WHERE `Tipo Oferta` = '{bid_type}' \"\n    )\n    calculated_price = cursor.fetchall()\n    calculated_price = [x[0] for x in calculated_price]\n\n    not_calculated_batches = list(set(batches) - set(calculated_price))\n    not_calculated_batches.sort()\n    if len(not_calculated_batches) != 0:\n        for date in calculated_dates:\n            date = date[0]\n            # Download the data for the date into a pandas DataFrame\n            interpolate_and_insert(\n                x=not_calculated_batches,\n                x_p=\"Precio Compra/Venta\",\n                fp=\"Energía Compra/Venta Acumulada\",\n                from_database=\"merged_input_data\",\n                to_database=\"batched_price_input_data\",\n                date=date,\n                bid_type=bid_type,\n                engine=engine,\n            )\n\n    # Process only the dates that are not already in the table\n    not_calculated_dates = list(set(available_dates) - set(calculated_dates))\n    for date in not_calculated_dates:\n        date = date[0]\n        # Download the data for the date into a pandas DataFrame\n        interpolate_and_insert(\n            x=batches,\n            x_p=\"Precio Compra/Venta\",\n            fp=\"Energía Compra/Venta Acumulada\",\n            from_database=\"merged_input_data\",\n            to_database=\"batched_price_input_data\",\n            date=date,\n            bid_type=bid_type,\n            engine=engine,\n        )\n\n    connection.commit()\n\n    # Close the connection\n    connection.close()\n\n    # Convert start_date and end_date to datetime\n    start_date = extract_datetime_from_date_parameter(start_date)\n    end_date = extract_datetime_from_date_parameter(end_date)\n\n    # Create a connection to the database\n    engine = sqlalchemy.create_engine(database_uri)\n    batches_str = \", \".join([str(batch) for batch in batches])\n\n    # Write the SQL query\n    query = f\"\"\"\n    SELECT *\n    FROM batched_price_input_data\n    WHERE `Fecha UTC` >= '{start_date}'\n    AND `Fecha UTC` <= '{end_date}'\n    AND `Tipo Oferta` = '{bid_type}'\n    AND `Precio Compra/Venta` IN ({batches_str})\n    AND `Precio Compra/Venta` BETWEEN {min_price} AND {max_price}\n    \"\"\"\n\n    batched_price_input_data = pd.read_sql(\n        query,\n        engine,\n    )\n\n    return batches, batched_price_input_data\n",
  "filepath": "energy-market-forecast\\src\\energy_demand\\nodes\\data_transformations\\create_batched_price_input_data_table.py",
  "parameters": {
    "start_date": "2024-01-20",
    "end_date": "2024-01-31",
    "bid_type": "C",
    "price_batch_size": 5,
    "min_price": 0,
    "max_price": 200,
    "database_config": {
      "database": "energy-market-forecast",
      "user": "root",
      "password": "3loy3loy",
      "host": "127.0.0.1"
    }
  },
  "run_command": "kedro run --to-nodes=create_batched_price_input_data_table",
  "inputs": [
    "featured_price_merged_input_data",
    "params:start_date",
    "params:end_date",
    "params:bid_type",
    "params:price_batch_size",
    "params:min_price",
    "params:max_price",
    "params:database_config"
  ],
  "outputs": [
    "price_batches",
    "batched_price_input_data"
  ]
}