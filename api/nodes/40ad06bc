{
  "code": "def manage_raw_pbc_data(start_date, end_date, database_config):\n    # establish a database connection\n    connection = create_raw_pbc_connection(database_config)\n    cursor = connection.cursor()\n    database_uri = get_database_uri(database_config)\n    engine = sqlalchemy.create_engine(database_uri)\n\n    start_date = extract_datetime_from_date_parameter(start_date)\n    end_date = extract_datetime_from_date_parameter(end_date)\n\n    # create a date range for every day between start_date and end_date\n    date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n\n    # extract the date part from the 'Fecha' column and drop duplicates\n    cursor.execute(\"SELECT DISTINCT `Fecha` FROM raw_pbc\")\n    available_dates = cursor.fetchall()\n    available_dates = [date[0] for date in available_dates]\n    available_dates = pd.to_datetime(available_dates, format=OMIE_DATE_PATTERN)\n\n    # check if any dates are missing from the data\n    missing_dates = date_range[~date_range.isin(available_dates)]\n    if not missing_dates.empty:\n        print(f\"Downloading missing data from OMIE API for {len(missing_dates)} dates\")\n        download_start_date = datetime.date(missing_dates.min())\n        download_end_date = datetime.date(missing_dates.max())\n\n        # If all the data is not available, download the missing data using the API\n        data = download_omie_data(download_start_date, download_end_date)\n\n        # Unidad is always empty\n        raise_exception_if_any_na(data.drop(\"Unidad\", axis=\"columns\"))\n\n        # Send it to the db\n        print(\"Inserting data into db, it can take some minutes, please wait...\")\n        insert_pbc_data_into_db(data, engine)\n\n    # close the database connection\n    connection.close()\n\n    start_date_omie_format = start_date.strftime(OMIE_DATE_PATTERN)\n    print(f\"==>> start_date_omie_format: {start_date_omie_format}\")\n    end_date_omie_format = end_date.strftime(OMIE_DATE_PATTERN)\n    print(f\"==>> end_date_omie_format: {end_date_omie_format}\")\n\n    # Return the downloaded data + the already existing data in the db\n    raw_pbc_data = pd.read_sql_query(\n        f\"\"\"SELECT * FROM raw_pbc \n        WHERE STR_TO_DATE(Fecha, '{SQL_OMIE_DATE_PATTERN}') BETWEEN '{start_date}' AND '{end_date}'\n        \"\"\",\n        engine,\n    )\n\n    return raw_pbc_data\n",
  "filepath": "energy-market-forecast\\src\\energy_demand\\nodes\\raw_data_extraction\\manage_raw_pbc_data.py",
  "parameters": {
    "start_date": "2024-01-20",
    "end_date": "2024-01-31",
    "database_config": {
      "database": "energy-market-forecast",
      "user": "root",
      "password": "3loy3loy",
      "host": "127.0.0.1"
    }
  },
  "run_command": "kedro run --to-nodes=manage_raw_pbc_data",
  "inputs": [
    "params:start_date",
    "params:end_date",
    "params:database_config"
  ],
  "outputs": [
    "raw_pbc_data"
  ]
}